// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/arvinpaundra/repository-api/models/domain"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// RequestAccessRepository is an autogenerated mock type for the RequestAccessRepository type
type RequestAccessRepository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: ctx, keyword, status, limit, offset
func (_m *RequestAccessRepository) FindAll(ctx context.Context, keyword string, status string, limit int, offset int) ([]domain.RequestAccess, int, error) {
	ret := _m.Called(ctx, keyword, status, limit, offset)

	var r0 []domain.RequestAccess
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int) []domain.RequestAccess); ok {
		r0 = rf(ctx, keyword, status, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.RequestAccess)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, int) int); ok {
		r1 = rf(ctx, keyword, status, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int, int) error); ok {
		r2 = rf(ctx, keyword, status, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindById provides a mock function with given fields: ctx, requestAccessId
func (_m *RequestAccessRepository) FindById(ctx context.Context, requestAccessId string) (domain.RequestAccess, error) {
	ret := _m.Called(ctx, requestAccessId)

	var r0 domain.RequestAccess
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.RequestAccess); ok {
		r0 = rf(ctx, requestAccessId)
	} else {
		r0 = ret.Get(0).(domain.RequestAccess)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, requestAccessId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, tx, requestAccess
func (_m *RequestAccessRepository) Save(ctx context.Context, tx *gorm.DB, requestAccess domain.RequestAccess) error {
	ret := _m.Called(ctx, tx, requestAccess)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, domain.RequestAccess) error); ok {
		r0 = rf(ctx, tx, requestAccess)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Total provides a mock function with given fields: ctx, status
func (_m *RequestAccessRepository) Total(ctx context.Context, status string) (int, error) {
	ret := _m.Called(ctx, status)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, status)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, tx, requestAccess, requestAccessId
func (_m *RequestAccessRepository) Update(ctx context.Context, tx *gorm.DB, requestAccess domain.RequestAccess, requestAccessId string) error {
	ret := _m.Called(ctx, tx, requestAccess, requestAccessId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, domain.RequestAccess, string) error); ok {
		r0 = rf(ctx, tx, requestAccess, requestAccessId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRequestAccessRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRequestAccessRepository creates a new instance of RequestAccessRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRequestAccessRepository(t mockConstructorTestingTNewRequestAccessRepository) *RequestAccessRepository {
	mock := &RequestAccessRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
