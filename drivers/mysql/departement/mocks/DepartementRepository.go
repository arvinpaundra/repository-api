// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/arvinpaundra/repository-api/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// DepartementRepository is an autogenerated mock type for the DepartementRepository type
type DepartementRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, departementId
func (_m *DepartementRepository) Delete(ctx context.Context, departementId string) error {
	ret := _m.Called(ctx, departementId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, departementId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, keyword, limit, offset
func (_m *DepartementRepository) FindAll(ctx context.Context, keyword string, limit int, offset int) ([]domain.Departement, int, error) {
	ret := _m.Called(ctx, keyword, limit, offset)

	var r0 []domain.Departement
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []domain.Departement); ok {
		r0 = rf(ctx, keyword, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Departement)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = rf(ctx, keyword, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, keyword, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindById provides a mock function with given fields: ctx, departementId
func (_m *DepartementRepository) FindById(ctx context.Context, departementId string) (domain.Departement, error) {
	ret := _m.Called(ctx, departementId)

	var r0 domain.Departement
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Departement); ok {
		r0 = rf(ctx, departementId)
	} else {
		r0 = ret.Get(0).(domain.Departement)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, departementId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByProgramStudyId provides a mock function with given fields: ctx, programStudyId
func (_m *DepartementRepository) FindByProgramStudyId(ctx context.Context, programStudyId string) ([]domain.Departement, error) {
	ret := _m.Called(ctx, programStudyId)

	var r0 []domain.Departement
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Departement); ok {
		r0 = rf(ctx, programStudyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Departement)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, programStudyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, _a1
func (_m *DepartementRepository) Save(ctx context.Context, _a1 domain.Departement) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Departement) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, _a1, departementId
func (_m *DepartementRepository) Update(ctx context.Context, _a1 domain.Departement, departementId string) error {
	ret := _m.Called(ctx, _a1, departementId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Departement, string) error); ok {
		r0 = rf(ctx, _a1, departementId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDepartementRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewDepartementRepository creates a new instance of DepartementRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDepartementRepository(t mockConstructorTestingTNewDepartementRepository) *DepartementRepository {
	mock := &DepartementRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
