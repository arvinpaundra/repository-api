// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/arvinpaundra/repository-api/models/domain"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// AuthorRepository is an autogenerated mock type for the AuthorRepository type
type AuthorRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, repositoryId, pemustakaId
func (_m *AuthorRepository) Delete(ctx context.Context, repositoryId string, pemustakaId string) error {
	ret := _m.Called(ctx, repositoryId, pemustakaId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, repositoryId, pemustakaId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByRepositoryId provides a mock function with given fields: ctx, repositoryId
func (_m *AuthorRepository) FindByRepositoryId(ctx context.Context, repositoryId string) ([]domain.Author, error) {
	ret := _m.Called(ctx, repositoryId)

	var r0 []domain.Author
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Author); ok {
		r0 = rf(ctx, repositoryId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Author)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, repositoryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, tx, _a2
func (_m *AuthorRepository) Save(ctx context.Context, tx *gorm.DB, _a2 []domain.Author) error {
	ret := _m.Called(ctx, tx, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, []domain.Author) error); ok {
		r0 = rf(ctx, tx, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAuthorRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthorRepository creates a new instance of AuthorRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthorRepository(t mockConstructorTestingTNewAuthorRepository) *AuthorRepository {
	mock := &AuthorRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
