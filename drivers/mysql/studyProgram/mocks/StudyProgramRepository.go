// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/arvinpaundra/repository-api/models/domain"
	mock "github.com/stretchr/testify/mock"
)

// StudyProgramRepository is an autogenerated mock type for the StudyProgramRepository type
type StudyProgramRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, studyProgramId
func (_m *StudyProgramRepository) Delete(ctx context.Context, studyProgramId string) error {
	ret := _m.Called(ctx, studyProgramId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, studyProgramId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, keyword, limit, offset
func (_m *StudyProgramRepository) FindAll(ctx context.Context, keyword string, limit int, offset int) ([]domain.StudyProgram, int, error) {
	ret := _m.Called(ctx, keyword, limit, offset)

	var r0 []domain.StudyProgram
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []domain.StudyProgram); ok {
		r0 = rf(ctx, keyword, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.StudyProgram)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = rf(ctx, keyword, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, keyword, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindById provides a mock function with given fields: ctx, studyProgramId
func (_m *StudyProgramRepository) FindById(ctx context.Context, studyProgramId string) (domain.StudyProgram, error) {
	ret := _m.Called(ctx, studyProgramId)

	var r0 domain.StudyProgram
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.StudyProgram); ok {
		r0 = rf(ctx, studyProgramId)
	} else {
		r0 = ret.Get(0).(domain.StudyProgram)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, studyProgramId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, studyProgram
func (_m *StudyProgramRepository) Save(ctx context.Context, studyProgram domain.StudyProgram) error {
	ret := _m.Called(ctx, studyProgram)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudyProgram) error); ok {
		r0 = rf(ctx, studyProgram)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, studyProgram, studyProgramId
func (_m *StudyProgramRepository) Update(ctx context.Context, studyProgram domain.StudyProgram, studyProgramId string) error {
	ret := _m.Called(ctx, studyProgram, studyProgramId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudyProgram, string) error); ok {
		r0 = rf(ctx, studyProgram, studyProgramId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStudyProgramRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewStudyProgramRepository creates a new instance of StudyProgramRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStudyProgramRepository(t mockConstructorTestingTNewStudyProgramRepository) *StudyProgramRepository {
	mock := &StudyProgramRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
