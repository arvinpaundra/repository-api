// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/arvinpaundra/repository-api/models/domain"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	request "github.com/arvinpaundra/repository-api/models/web/pemustaka/request"
)

// PemustakaRepository is an autogenerated mock type for the PemustakaRepository type
type PemustakaRepository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: ctx, query, limit, offset
func (_m *PemustakaRepository) FindAll(ctx context.Context, query request.PemustakaRequestQuery, limit int, offset int) ([]domain.Pemustaka, int, error) {
	ret := _m.Called(ctx, query, limit, offset)

	var r0 []domain.Pemustaka
	if rf, ok := ret.Get(0).(func(context.Context, request.PemustakaRequestQuery, int, int) []domain.Pemustaka); ok {
		r0 = rf(ctx, query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Pemustaka)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, request.PemustakaRequestQuery, int, int) int); ok {
		r1 = rf(ctx, query, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, request.PemustakaRequestQuery, int, int) error); ok {
		r2 = rf(ctx, query, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindById provides a mock function with given fields: ctx, pemustakaId
func (_m *PemustakaRepository) FindById(ctx context.Context, pemustakaId string) (domain.Pemustaka, error) {
	ret := _m.Called(ctx, pemustakaId)

	var r0 domain.Pemustaka
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Pemustaka); ok {
		r0 = rf(ctx, pemustakaId)
	} else {
		r0 = ret.Get(0).(domain.Pemustaka)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pemustakaId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserId provides a mock function with given fields: ctx, userId
func (_m *PemustakaRepository) FindByUserId(ctx context.Context, userId string) (domain.Pemustaka, error) {
	ret := _m.Called(ctx, userId)

	var r0 domain.Pemustaka
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Pemustaka); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(domain.Pemustaka)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalPemustakaByDepartementId provides a mock function with given fields: ctx, departementId
func (_m *PemustakaRepository) GetTotalPemustakaByDepartementId(ctx context.Context, departementId string) (int, error) {
	ret := _m.Called(ctx, departementId)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, departementId)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, departementId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, tx, _a2
func (_m *PemustakaRepository) Save(ctx context.Context, tx *gorm.DB, _a2 domain.Pemustaka) error {
	ret := _m.Called(ctx, tx, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, domain.Pemustaka) error); ok {
		r0 = rf(ctx, tx, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, tx, _a2, pemustakaId
func (_m *PemustakaRepository) Update(ctx context.Context, tx *gorm.DB, _a2 domain.Pemustaka, pemustakaId string) error {
	ret := _m.Called(ctx, tx, _a2, pemustakaId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, domain.Pemustaka, string) error); ok {
		r0 = rf(ctx, tx, _a2, pemustakaId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPemustakaRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPemustakaRepository creates a new instance of PemustakaRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPemustakaRepository(t mockConstructorTestingTNewPemustakaRepository) *PemustakaRepository {
	mock := &PemustakaRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
