// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/arvinpaundra/repository-api/models/domain"
	mock "github.com/stretchr/testify/mock"
)

// RoleRepository is an autogenerated mock type for the RoleRepository type
type RoleRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, roleId
func (_m *RoleRepository) Delete(ctx context.Context, roleId string) error {
	ret := _m.Called(ctx, roleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, roleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, visibiltity
func (_m *RoleRepository) FindAll(ctx context.Context, visibiltity string) ([]domain.Role, error) {
	ret := _m.Called(ctx, visibiltity)

	var r0 []domain.Role
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Role); ok {
		r0 = rf(ctx, visibiltity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, visibiltity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, roleId
func (_m *RoleRepository) FindById(ctx context.Context, roleId string) (domain.Role, error) {
	ret := _m.Called(ctx, roleId)

	var r0 domain.Role
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Role); ok {
		r0 = rf(ctx, roleId)
	} else {
		r0 = ret.Get(0).(domain.Role)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, roleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, _a1
func (_m *RoleRepository) Save(ctx context.Context, _a1 domain.Role) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Role) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, _a1, roleId
func (_m *RoleRepository) Update(ctx context.Context, _a1 domain.Role, roleId string) error {
	ret := _m.Called(ctx, _a1, roleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Role, string) error); ok {
		r0 = rf(ctx, _a1, roleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRoleRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoleRepository creates a new instance of RoleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoleRepository(t mockConstructorTestingTNewRoleRepository) *RoleRepository {
	mock := &RoleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
