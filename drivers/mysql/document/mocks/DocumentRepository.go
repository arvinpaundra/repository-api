// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/arvinpaundra/repository-api/models/domain"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// DocumentRepository is an autogenerated mock type for the DocumentRepository type
type DocumentRepository struct {
	mock.Mock
}

// FindByRepositoryId provides a mock function with given fields: ctx, repositoryId
func (_m *DocumentRepository) FindByRepositoryId(ctx context.Context, repositoryId string) (domain.Document, error) {
	ret := _m.Called(ctx, repositoryId)

	var r0 domain.Document
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Document); ok {
		r0 = rf(ctx, repositoryId)
	} else {
		r0 = ret.Get(0).(domain.Document)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, repositoryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, tx, _a2
func (_m *DocumentRepository) Save(ctx context.Context, tx *gorm.DB, _a2 domain.Document) error {
	ret := _m.Called(ctx, tx, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, domain.Document) error); ok {
		r0 = rf(ctx, tx, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, tx, _a2, repositoryId
func (_m *DocumentRepository) Update(ctx context.Context, tx *gorm.DB, _a2 domain.Document, repositoryId string) error {
	ret := _m.Called(ctx, tx, _a2, repositoryId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, domain.Document, string) error); ok {
		r0 = rf(ctx, tx, _a2, repositoryId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDocumentRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewDocumentRepository creates a new instance of DocumentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDocumentRepository(t mockConstructorTestingTNewDocumentRepository) *DocumentRepository {
	mock := &DocumentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
