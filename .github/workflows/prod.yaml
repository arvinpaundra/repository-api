name: Run CI CD Production for REKSI API

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  testing:
    runs-on: ubuntu-latest
    name: 'Run linter'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - name: 'linter'
        uses: golangci/golangci-lint-action@v3

  build:
    runs-on: ubuntu-latest
    name: 'Build golang application'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - name: 'build application'
        run: go build -o ./dist/main ./app/main.go

  deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE: arvinpaundra/reksi
    name: 'Deploy application to DigitalOcean'
    steps:
      - name: Set tag to github env variable
        run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV

      - name: Display tag version from github env
        run: echo ${{ env.RELEASE_VERSION }}

      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Setup QEMU
        uses: docker/setup-buildx-action@v2

      - name: Login to docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push to docker hub
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ env.IMAGE }}:${{ env.RELEASE_VERSION }}

      - name: Login to droplet via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOSTNAME }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            docker stop reksi-app
            docker container rm reksi-app
            docker pull ${{ env.IMAGE }}:${{ env.RELEASE_VERSION }}
            cd reksi
            docker container create --name reksi-app -p 8080:8080 ${{ env.IMAGE }}:${{ env.RELEASE_VERSION }}
            docker cp $PWD/reksi/.env reksi-app:/.env
            docker start reksi-app
