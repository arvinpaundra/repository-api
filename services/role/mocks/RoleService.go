// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	request "github.com/arvinpaundra/repository-api/models/web/role/request"
	mock "github.com/stretchr/testify/mock"

	response "github.com/arvinpaundra/repository-api/models/web/role/response"
)

// RoleService is an autogenerated mock type for the RoleService type
type RoleService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *RoleService) Create(ctx context.Context, _a1 request.CreateRoleRequest) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateRoleRequest) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, roleId
func (_m *RoleService) Delete(ctx context.Context, roleId string) error {
	ret := _m.Called(ctx, roleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, roleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, visibility
func (_m *RoleService) FindAll(ctx context.Context, visibility string) ([]response.RoleResponse, error) {
	ret := _m.Called(ctx, visibility)

	var r0 []response.RoleResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) []response.RoleResponse); ok {
		r0 = rf(ctx, visibility)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.RoleResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, visibility)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, roleId
func (_m *RoleService) FindById(ctx context.Context, roleId string) (response.RoleResponse, error) {
	ret := _m.Called(ctx, roleId)

	var r0 response.RoleResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) response.RoleResponse); ok {
		r0 = rf(ctx, roleId)
	} else {
		r0 = ret.Get(0).(response.RoleResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, roleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, _a1, roleId
func (_m *RoleService) Update(ctx context.Context, _a1 request.UpdateRoleRequest, roleId string) error {
	ret := _m.Called(ctx, _a1, roleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateRoleRequest, string) error); ok {
		r0 = rf(ctx, _a1, roleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRoleService interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoleService creates a new instance of RoleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoleService(t mockConstructorTestingTNewRoleService) *RoleService {
	mock := &RoleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
