// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	request "github.com/arvinpaundra/repository-api/models/web/studyProgram/request"
	response "github.com/arvinpaundra/repository-api/models/web/studyProgram/response"
	mock "github.com/stretchr/testify/mock"
)

// StudyProgramService is an autogenerated mock type for the StudyProgramService type
type StudyProgramService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, studyProgram
func (_m *StudyProgramService) Create(ctx context.Context, studyProgram request.CreateStudyProgramRequest) error {
	ret := _m.Called(ctx, studyProgram)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateStudyProgramRequest) error); ok {
		r0 = rf(ctx, studyProgram)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, studyProgramId
func (_m *StudyProgramService) Delete(ctx context.Context, studyProgramId string) error {
	ret := _m.Called(ctx, studyProgramId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, studyProgramId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, keyword, limit, offset
func (_m *StudyProgramService) FindAll(ctx context.Context, keyword string, limit int, offset int) ([]response.StudyProgramResponse, int, int, error) {
	ret := _m.Called(ctx, keyword, limit, offset)

	var r0 []response.StudyProgramResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []response.StudyProgramResponse); ok {
		r0 = rf(ctx, keyword, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.StudyProgramResponse)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = rf(ctx, keyword, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) int); ok {
		r2 = rf(ctx, keyword, limit, offset)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, string, int, int) error); ok {
		r3 = rf(ctx, keyword, limit, offset)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// FindById provides a mock function with given fields: ctx, studyProgramId
func (_m *StudyProgramService) FindById(ctx context.Context, studyProgramId string) (response.StudyProgramResponse, error) {
	ret := _m.Called(ctx, studyProgramId)

	var r0 response.StudyProgramResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) response.StudyProgramResponse); ok {
		r0 = rf(ctx, studyProgramId)
	} else {
		r0 = ret.Get(0).(response.StudyProgramResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, studyProgramId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, studyProgram, studyProgramId
func (_m *StudyProgramService) Update(ctx context.Context, studyProgram request.UpdateStudyProgramRequest, studyProgramId string) error {
	ret := _m.Called(ctx, studyProgram, studyProgramId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateStudyProgramRequest, string) error); ok {
		r0 = rf(ctx, studyProgram, studyProgramId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStudyProgramService interface {
	mock.TestingT
	Cleanup(func())
}

// NewStudyProgramService creates a new instance of StudyProgramService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStudyProgramService(t mockConstructorTestingTNewStudyProgramService) *StudyProgramService {
	mock := &StudyProgramService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
