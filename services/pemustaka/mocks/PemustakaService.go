// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "github.com/arvinpaundra/repository-api/models/web/pemustaka/request"

	response "github.com/arvinpaundra/repository-api/models/web/pemustaka/response"
)

// PemustakaService is an autogenerated mock type for the PemustakaService type
type PemustakaService struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: ctx, query, limit, offset
func (_m *PemustakaService) FindAll(ctx context.Context, query request.PemustakaRequestQuery, limit int, offset int) ([]response.PemustakaResponse, int, int, error) {
	ret := _m.Called(ctx, query, limit, offset)

	var r0 []response.PemustakaResponse
	if rf, ok := ret.Get(0).(func(context.Context, request.PemustakaRequestQuery, int, int) []response.PemustakaResponse); ok {
		r0 = rf(ctx, query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.PemustakaResponse)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, request.PemustakaRequestQuery, int, int) int); ok {
		r1 = rf(ctx, query, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, request.PemustakaRequestQuery, int, int) int); ok {
		r2 = rf(ctx, query, limit, offset)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, request.PemustakaRequestQuery, int, int) error); ok {
		r3 = rf(ctx, query, limit, offset)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// FindById provides a mock function with given fields: ctx, pemustakaId
func (_m *PemustakaService) FindById(ctx context.Context, pemustakaId string) (response.PemustakaResponse, error) {
	ret := _m.Called(ctx, pemustakaId)

	var r0 response.PemustakaResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) response.PemustakaResponse); ok {
		r0 = rf(ctx, pemustakaId)
	} else {
		r0 = ret.Get(0).(response.PemustakaResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pemustakaId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, req
func (_m *PemustakaService) Login(ctx context.Context, req request.LoginPemustakaRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.LoginPemustakaRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.LoginPemustakaRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, req
func (_m *PemustakaService) Register(ctx context.Context, req request.RegisterPemustakaRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.RegisterPemustakaRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, req, pemustakaId
func (_m *PemustakaService) Update(ctx context.Context, req request.UpdatePemustakaRequest, pemustakaId string) error {
	ret := _m.Called(ctx, req, pemustakaId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdatePemustakaRequest, string) error); ok {
		r0 = rf(ctx, req, pemustakaId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPemustakaService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPemustakaService creates a new instance of PemustakaService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPemustakaService(t mockConstructorTestingTNewPemustakaService) *PemustakaService {
	mock := &PemustakaService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
