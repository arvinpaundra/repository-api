// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "github.com/arvinpaundra/repository-api/models/web/repository/request"

	response "github.com/arvinpaundra/repository-api/models/web/repository/response"
)

// RepositoryService is an autogenerated mock type for the RepositoryService type
type RepositoryService struct {
	mock.Mock
}

// CreateFinalProjectReport provides a mock function with given fields: ctx, repositoryDTO, files
func (_m *RepositoryService) CreateFinalProjectReport(ctx context.Context, repositoryDTO request.CreateFinalProjectReportRequest, files request.RepositoryInputFiles) error {
	ret := _m.Called(ctx, repositoryDTO, files)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateFinalProjectReportRequest, request.RepositoryInputFiles) error); ok {
		r0 = rf(ctx, repositoryDTO, files)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, repositoryId
func (_m *RepositoryService) Delete(ctx context.Context, repositoryId string) error {
	ret := _m.Called(ctx, repositoryId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, repositoryId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, query, limit, offset
func (_m *RepositoryService) FindAll(ctx context.Context, query request.RepositoryRequestQuery, limit int, offset int) ([]response.RepositoryResponse, int, int, error) {
	ret := _m.Called(ctx, query, limit, offset)

	var r0 []response.RepositoryResponse
	if rf, ok := ret.Get(0).(func(context.Context, request.RepositoryRequestQuery, int, int) []response.RepositoryResponse); ok {
		r0 = rf(ctx, query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.RepositoryResponse)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, request.RepositoryRequestQuery, int, int) int); ok {
		r1 = rf(ctx, query, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, request.RepositoryRequestQuery, int, int) int); ok {
		r2 = rf(ctx, query, limit, offset)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, request.RepositoryRequestQuery, int, int) error); ok {
		r3 = rf(ctx, query, limit, offset)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// FindByAuthorId provides a mock function with given fields: ctx, pemustakaId, query, limit, offset
func (_m *RepositoryService) FindByAuthorId(ctx context.Context, pemustakaId string, query request.RepositoryRequestQuery, limit int, offset int) ([]response.RepositoryResponse, int, int, error) {
	ret := _m.Called(ctx, pemustakaId, query, limit, offset)

	var r0 []response.RepositoryResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, request.RepositoryRequestQuery, int, int) []response.RepositoryResponse); ok {
		r0 = rf(ctx, pemustakaId, query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.RepositoryResponse)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, request.RepositoryRequestQuery, int, int) int); ok {
		r1 = rf(ctx, pemustakaId, query, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, string, request.RepositoryRequestQuery, int, int) int); ok {
		r2 = rf(ctx, pemustakaId, query, limit, offset)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, string, request.RepositoryRequestQuery, int, int) error); ok {
		r3 = rf(ctx, pemustakaId, query, limit, offset)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// FindByCategoryId provides a mock function with given fields: ctx, categoryId, query, limit, offset
func (_m *RepositoryService) FindByCategoryId(ctx context.Context, categoryId string, query request.RepositoryRequestQuery, limit int, offset int) ([]response.RepositoryResponse, int, int, error) {
	ret := _m.Called(ctx, categoryId, query, limit, offset)

	var r0 []response.RepositoryResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, request.RepositoryRequestQuery, int, int) []response.RepositoryResponse); ok {
		r0 = rf(ctx, categoryId, query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.RepositoryResponse)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, request.RepositoryRequestQuery, int, int) int); ok {
		r1 = rf(ctx, categoryId, query, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, string, request.RepositoryRequestQuery, int, int) int); ok {
		r2 = rf(ctx, categoryId, query, limit, offset)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, string, request.RepositoryRequestQuery, int, int) error); ok {
		r3 = rf(ctx, categoryId, query, limit, offset)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// FindByCollectionId provides a mock function with given fields: ctx, collectionId, query, limit, offset
func (_m *RepositoryService) FindByCollectionId(ctx context.Context, collectionId string, query request.RepositoryRequestQuery, limit int, offset int) ([]response.RepositoryResponse, int, int, error) {
	ret := _m.Called(ctx, collectionId, query, limit, offset)

	var r0 []response.RepositoryResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, request.RepositoryRequestQuery, int, int) []response.RepositoryResponse); ok {
		r0 = rf(ctx, collectionId, query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.RepositoryResponse)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, request.RepositoryRequestQuery, int, int) int); ok {
		r1 = rf(ctx, collectionId, query, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, string, request.RepositoryRequestQuery, int, int) int); ok {
		r2 = rf(ctx, collectionId, query, limit, offset)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, string, request.RepositoryRequestQuery, int, int) error); ok {
		r3 = rf(ctx, collectionId, query, limit, offset)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// FindByExaminerId provides a mock function with given fields: ctx, pemustakaId, query, limit, offset
func (_m *RepositoryService) FindByExaminerId(ctx context.Context, pemustakaId string, query request.RepositoryRequestQuery, limit int, offset int) ([]response.RepositoryResponse, int, int, error) {
	ret := _m.Called(ctx, pemustakaId, query, limit, offset)

	var r0 []response.RepositoryResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, request.RepositoryRequestQuery, int, int) []response.RepositoryResponse); ok {
		r0 = rf(ctx, pemustakaId, query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.RepositoryResponse)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, request.RepositoryRequestQuery, int, int) int); ok {
		r1 = rf(ctx, pemustakaId, query, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, string, request.RepositoryRequestQuery, int, int) int); ok {
		r2 = rf(ctx, pemustakaId, query, limit, offset)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, string, request.RepositoryRequestQuery, int, int) error); ok {
		r3 = rf(ctx, pemustakaId, query, limit, offset)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// FindById provides a mock function with given fields: ctx, repositoryId
func (_m *RepositoryService) FindById(ctx context.Context, repositoryId string) (response.DetailRepositoryResponse, error) {
	ret := _m.Called(ctx, repositoryId)

	var r0 response.DetailRepositoryResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) response.DetailRepositoryResponse); ok {
		r0 = rf(ctx, repositoryId)
	} else {
		r0 = ret.Get(0).(response.DetailRepositoryResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, repositoryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByMentorId provides a mock function with given fields: ctx, pemustakaId, query, limit, offset
func (_m *RepositoryService) FindByMentorId(ctx context.Context, pemustakaId string, query request.RepositoryRequestQuery, limit int, offset int) ([]response.RepositoryResponse, int, int, error) {
	ret := _m.Called(ctx, pemustakaId, query, limit, offset)

	var r0 []response.RepositoryResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, request.RepositoryRequestQuery, int, int) []response.RepositoryResponse); ok {
		r0 = rf(ctx, pemustakaId, query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.RepositoryResponse)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, request.RepositoryRequestQuery, int, int) int); ok {
		r1 = rf(ctx, pemustakaId, query, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, string, request.RepositoryRequestQuery, int, int) int); ok {
		r2 = rf(ctx, pemustakaId, query, limit, offset)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, string, request.RepositoryRequestQuery, int, int) error); ok {
		r3 = rf(ctx, pemustakaId, query, limit, offset)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

type mockConstructorTestingTNewRepositoryService interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositoryService creates a new instance of RepositoryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryService(t mockConstructorTestingTNewRepositoryService) *RepositoryService {
	mock := &RepositoryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
